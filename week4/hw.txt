Given valu v and pattern p, 
either p matches v or not. 

If it does, the match produces a list of string * valu pairs; 
order in the list does not matter. 
The rules for matching should be unsurprising:

• Wildcard matches everything and produces the empty list of bindings.
• Variable s matches any value v and produces the one-element list holding (s,v).
• UnitP matches only Unit and produces the empty list of bindings.
• ConstP 17 matches only Const 17 and produces the empty list of bindings (and similarly for other integers).
• TupleP ps matches a value of the form Tuple vs if ps and vs have the same length and for all i, the ith element of ps matches the ith element of vs. The list of bindings produced is all the lists from the nested pattern matches appended together.
• ConstructorP(s1,p) matches Constructor(s2,v) if s1 and s2 are the same string (you can compare them with =) and p matches v. The list of bindings produced is the list from the nested pattern match. We call the strings s1 and s2 the constructor name.
• Nothing else matches.

**************************************************************************************

12. 

Write a function 

first_match that takes a value and a list of patterns and
returns a (string * valu) list option, namely NONE if no pattern in the list
matches or SOME lst where lst is the list of bindings for the first pattern in
the list that matches. Use first_answer and a handle-expression. 

Hints: Sample solution is 3 lines.
